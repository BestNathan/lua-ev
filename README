**********************************************************************
* Author  : Brian Maher <maherb at brimworks dot com>
* Library : lua-ev - Lua 5.1 interface to libev
*
* The MIT License
* 
* Copyright (c) 2009 Brian Maher
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
**********************************************************************

To use this library, you need libev, get it here:
     http://dist.schmorp.de/libev/
     http://software.schmorp.de/pkg/libev.html

======================================================================
NOTE: This is unstable code!  If you code to this interface there is a
possibility that future versions of this library will not be backwards
compatible.
======================================================================

EVLUA:

  A library for wrapping lua with the libev event loop.  Currently it
  is a simple thin wrapper over libev for creating event loops and
  watchers.

IMPLEMENTATION NOTES:

  * All objects are allocated via lua_newuserdata(), all user data
    items are registered in a weak table and the C structures index
    into this registry so we can go from C struct -> Lua userdata.
    Any Lua state for the userdata is tracked in the fenv of the user
    data so that GC works properly.

  * The callbacks registered always assume the loop userdata is at the
    top of the Lua stack.  This means that you should only call
    ev_loop from Lua (perhaps we can remove this limitation in the
    future?)

TODO LIST:

These are things that I would like to see done before this code can be
considered "stable":

 * Use the more standard cmake build system. (high priority)

 * When executing callback if we have an error handle OOM possible
   exception. (low priority)

 * If a callback fails we should do something other than
   fprintf(stderr).  Not sure what yet (make it so you can set an
   error handler?)

 * When the loop terminates should we clean-up "daemon" watchers?

 * Create 'elua' (event-lua) which:

   - Creates a coroutine "the main thread" that starts the program.

   - Registers a function that resume(s) that coroutine via an "idle"
     watcher.

   - Start the event loop (which triggers our only "idle" watcher).

   - coroutine.yield("watcher", WATCHER) will register WATCHER so that
     it resumes the coroutine we just ran after WATCHER is triggered.

   - coroutine.yield() registers an idle watcher that resumes the
     current coroutine when we are idle, we need to make sure that
     idle watchers are ran in LRU order.

   - coroutine.yield("thread", COROUTINE, "daemon") registers idle
     watchers for the coroutine, optionally making this a "daemon
     thread" which means that the program will exit even if this
     daemon thread has not ran to completion.  The current coroutine
     is then immediately resumed.  New threads are given "higher
     priority" in their idle watchers.

   - coroutine.yield("join", COROUTINE, COROUTINE, ...) registers "on
     exit" handler that resumes the current coroutine when all the
     specified coroutines have "exited" (are no longer running).

   - All I/O operations are done on non-blocking file-handles, and
     will yield until the appropriate WATCHER is triggered (simply
     implemented by using coroutine.yield("watcher", WATCHER)).

   - The callbacks are all instrumented so you can easily figure out
     what segment of code is executing for to long of a time.
